name: CICD

on:
  push:
    branches: [ deploy-to-ecs-fargate ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'us-east-2'

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          REPOSITORY: nodejs-app
        run: |
          docker build -t $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT    

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: nodejs-app-task-definition.json 
          container-name: nodejs-app
          image: ${{ steps.build-image.outputs.image }}

      - name: Check if ECS service exists
        id: check-service
        run: |
          SERVICE_STATUS=$(aws ecs describe-services --cluster dev-cluster --services nodejs-app-service --query "services[0].status" --output text || echo "NOT_FOUND")
          echo "Service status: $SERVICE_STATUS"
          echo "status=$SERVICE_STATUS" >> $GITHUB_ENV

      - name: Create ECS service if not exists
        if: env.status == 'NOT_FOUND'
        run: |
          echo "Creating ECS service as it doesn't exist."
          aws ecs create-service \
            --cluster dev-cluster \
            --service-name nodejs-app-service \
            --task-definition nodejs-app-task-definition \
            --desired-count 1 \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[subnet-abc12345],securityGroups=[sg-12345678],assignPublicIp=ENABLED}" \
            --platform-version "LATEST"

      - name: Update ECS service if exists
        if: env.status != 'NOT_FOUND'
        run: |
          echo "Updating ECS service."
          aws ecs update-service \
            --cluster dev-cluster \
            --service nodejs-app-service \
            --force-new-deployment \
            --task-definition nodejs-app-task-definition
